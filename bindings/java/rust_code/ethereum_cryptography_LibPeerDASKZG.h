/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class ethereum_cryptography_LibPeerDASKZG */

#ifndef _Included_ethereum_cryptography_LibPeerDASKZG
#define _Included_ethereum_cryptography_LibPeerDASKZG
#ifdef __cplusplus
extern "C" {
#endif
#undef ethereum_cryptography_LibPeerDASKZG_BYTES_PER_COMMITMENT
#define ethereum_cryptography_LibPeerDASKZG_BYTES_PER_COMMITMENT 48L
#undef ethereum_cryptography_LibPeerDASKZG_BYTES_PER_PROOF
#define ethereum_cryptography_LibPeerDASKZG_BYTES_PER_PROOF 48L
#undef ethereum_cryptography_LibPeerDASKZG_BYTES_PER_FIELD_ELEMENT
#define ethereum_cryptography_LibPeerDASKZG_BYTES_PER_FIELD_ELEMENT 32L
#undef ethereum_cryptography_LibPeerDASKZG_BYTES_PER_BLOB
#define ethereum_cryptography_LibPeerDASKZG_BYTES_PER_BLOB 131072L
#undef ethereum_cryptography_LibPeerDASKZG_MAX_NUM_COLUMNS
#define ethereum_cryptography_LibPeerDASKZG_MAX_NUM_COLUMNS 128L
#undef ethereum_cryptography_LibPeerDASKZG_BYTES_PER_CELL
#define ethereum_cryptography_LibPeerDASKZG_BYTES_PER_CELL 2048L
/*
 * Class:     ethereum_cryptography_LibPeerDASKZG
 * Method:    peerDASContextNew
 * Signature: ()J
 */
JNIEXPORT jlong JNICALL Java_ethereum_cryptography_LibPeerDASKZG_peerDASContextNew
  (JNIEnv *, jclass);

/*
 * Class:     ethereum_cryptography_LibPeerDASKZG
 * Method:    peerDASContextDestroy
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_ethereum_cryptography_LibPeerDASKZG_peerDASContextDestroy
  (JNIEnv *, jclass, jlong);

/*
 * Class:     ethereum_cryptography_LibPeerDASKZG
 * Method:    computeCellsAndKZGProofs
 * Signature: (J[B)Lethereum/cryptography/CellsAndProofs;
 */
JNIEXPORT jobject JNICALL Java_ethereum_cryptography_LibPeerDASKZG_computeCellsAndKZGProofs
  (JNIEnv *, jclass, jlong, jbyteArray);

/*
 * Class:     ethereum_cryptography_LibPeerDASKZG
 * Method:    blobToKZGCommitment
 * Signature: (J[B)[B
 */
JNIEXPORT jbyteArray JNICALL Java_ethereum_cryptography_LibPeerDASKZG_blobToKZGCommitment
  (JNIEnv *, jclass, jlong, jbyteArray);

/*
 * Class:     ethereum_cryptography_LibPeerDASKZG
 * Method:    verifyCellKZGProofBatch
 * Signature: (J[[B[J[J[[B[[B)Z
 */
JNIEXPORT jboolean JNICALL Java_ethereum_cryptography_LibPeerDASKZG_verifyCellKZGProofBatch
  (JNIEnv *, jclass, jlong, jobjectArray, jlongArray, jlongArray, jobjectArray, jobjectArray);

/*
 * Class:     ethereum_cryptography_LibPeerDASKZG
 * Method:    recoverCellsAndProof
 * Signature: (J[J[[B)Lethereum/cryptography/CellsAndProofs;
 */
JNIEXPORT jobject JNICALL Java_ethereum_cryptography_LibPeerDASKZG_recoverCellsAndProof
  (JNIEnv *, jclass, jlong, jlongArray, jobjectArray);

#ifdef __cplusplus
}
#endif
#endif
