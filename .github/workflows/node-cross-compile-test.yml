name: Node Napi Cross compile testing
env:
  DEBUG: napi:*
  APP_NAME: peerdas-kzg
  MACOSX_DEPLOYMENT_TARGET: '10.13'
permissions:
  contents: write
  id-token: write

on:
  workflow_dispatch:
    inputs:
      ref:
        description: The reference (branch/tag/commit) to checkout
        required: true

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-latest
            target: x86_64-apple-darwin
          - host: macos-latest
            target: aarch64-apple-darwin
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - host: ubuntu-latest
            target: x86_64-pc-windows-msvc
          - host: ubuntu-latest
            target: aarch64-pc-windows-msvc

    name: Build - ${{ matrix.settings.target }}
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.settings.target }}
      # llvm-preview-tools are needed for xwin, because we are compiling assembly (blst)
      # Alternatively, you can install llvm
      - name: Install llvm-preview-tools
        if: runner.os == 'Linux' && contains(matrix.settings.target, 'windows')
        run: rustup component add llvm-tools-preview 
      - name: Install dependencies
        run: yarn install
        working-directory: bindings/node
      - name: Setup Zig (Linux only)
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: 0.13.0
      - name: Install cargo-zigbuild (Linux only)
        if: runner.os == 'Linux'
        run: cargo install cargo-zigbuild
      - name: Install cargo-xwin (Windows on Linux only)
        if: runner.os == 'Linux' && contains(matrix.settings.target, 'windows')
        run: cargo install cargo-xwin
      - name: Build (macOS)
        if: runner.os == 'macOS'
        run: |
          rustup target add ${{ matrix.settings.target }}
          yarn build --release --target ${{ matrix.settings.target }}
        working-directory: bindings/node
      - name: Build (Linux)
        if: runner.os == 'Linux' && !contains(matrix.settings.target, 'windows')
        run: yarn build --zig --release --target ${{ matrix.settings.target }}
        working-directory: bindings/node
      - name: Build (Windows on Linux)
        if: runner.os == 'Linux' && contains(matrix.settings.target, 'windows')
        run: yarn build --release --target ${{ matrix.settings.target }}
        working-directory: bindings/node
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: bindings/node/${{ env.APP_NAME }}.*.node
          if-no-files-found: error

  test:
    needs: build
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: macos-13
            target: x86_64-apple-darwin
          - host: macos-14
            target: aarch64-apple-darwin
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - host: ubuntu-latest
            target: aarch64-unknown-linux-gnu
          - host: windows-latest
            target: x86_64-pc-windows-msvc
          - host: windows-latest
            target: aarch64-pc-windows-msvc
        node:
          - '20'

    name: Test - ${{ matrix.settings.target }} - node@${{ matrix.node }}
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: yarn
          cache-dependency-path: 'bindings/node'
      - name: Install dependencies
        run: yarn install
        working-directory: bindings/node
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: bindings/node
      
      # Native testing for macOS (both Intel and ARM)
      - name: Test bindings (macOS)
        if: startsWith(matrix.settings.host, 'macos')
        run: yarn test
        working-directory: bindings/node

      # Native testing for x86_64 Linux
      - name: Test bindings (Linux x86_64)
        if: matrix.settings.target == 'x86_64-unknown-linux-gnu'
        run: yarn test
        working-directory: bindings/node

      # Emulated testing for aarch64 Linux
      - name: Set up QEMU
        if: matrix.settings.target == 'aarch64-unknown-linux-gnu'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64
      - name: Test bindings (Linux ARM64)
        if: matrix.settings.target == 'aarch64-unknown-linux-gnu'
        uses: addnab/docker-run-action@v3
        with:
          image: node:${{ matrix.node }}-slim
          options: '--platform linux/arm64 -v ${{ github.workspace }}:/build -w /build'
          run: |
            cd bindings/node
            yarn config set supportedArchitectures.cpu "arm64"
            yarn config set supportedArchitectures.libc "glibc"
            yarn install
            yarn test

      # Native testing for x86_64 Windows
      - name: Test bindings (Windows x86_64)
        if: matrix.settings.target == 'x86_64-pc-windows-msvc'
        run: yarn test
        working-directory: bindings/node

    # Placeholder for Windows ARM64 testing
    #   - name: Test bindings (Windows ARM64)
    #     if: matrix.settings.target == 'aarch64-pc-windows-msvc'
    #     shell: powershell
    #     run: |
    #       Write-Host "Testing Windows ARM64 is not implemented yet."
    #     working-directory: bindings/node

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs:
      - test
    defaults:
      run:
        working-directory: bindings/node
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: yarn
          cache-dependency-path: 'bindings/node'
      - name: Install dependencies
        run: yarn install
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Move artifacts
        run: yarn artifacts
      - name: Publish
        run: |
          npm config set provenance true
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
          if [[ ${{ inputs.ref }} =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            npm publish --access public
          else
            npm publish --tag next --access public
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_RELEASE_TOKEN }}