name: Test Publish Dummy Package to Maven Central

on:
  workflow_dispatch:

jobs:
  publish-dummy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3

    - name: Import GPG key
      uses: crazy-max/ghaction-import-gpg@v6
      with:
        gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY_JAVA_PUBLISHING }}
        passphrase: ${{ secrets.GPG_PASSPHRASE_JAVA_PUBLISHING }}

    - name: Create dummy project and initialize Gradle
      run: |
        mkdir -p src/main/java/org/peerdas/kzg
        echo "package org.peerdas.kzg;

        /**
         * DummyClass is a simple class for testing the build and deployment process.
         */
        public class DummyClass {

            /**
             * Main method that prints a hello message.
             *
             * @param args command line arguments
             */
            public static void main(String[] args) {
                System.out.println(\"Hello from PeerDAS KZG DummyClass\");
            }
        }" > src/main/java/org/peerdas/kzg/DummyClass.java
        
        echo "plugins {
          id 'java-library'
          id 'maven-publish'
          id 'org.jreleaser' version '1.12.0'
        }
        
        group = 'io.github.kevaundray.dummy'
        version = '0.0.2'
        
        java {
          withJavadocJar()
          withSourcesJar()
        }
        
        publishing {
          publications {
            maven(MavenPublication) {
              from components.java
        
              pom {
                name = 'PeerDAS KZG Dummy Library'
                description = 'A dummy library for testing PeerDAS KZG operations publication'
                url = 'https://github.com/crate-crypto/peerdas-kzg'
                licenses {
                  license {
                    name = 'The Apache License, Version 2.0'
                    url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                  }
                }
                developers {
                  developer {
                    id = 'kevthedev'
                    name = 'Kev Wed'
                    email = 'kev@the.dev'
                  }
                }
                scm {
                  connection = 'scm:git:git://github.com/crate-crypto/peerdas-kzg.git'
                  developerConnection = 'scm:git:ssh://github.com:crate-crypto/peerdas-kzg.git'
                  url = 'https://github.com/crate-crypto/peerdas-kzg'
                }
              }
            }
          }
        
          repositories {
            maven {
              url = layout.buildDirectory.dir('staging-deploy')
            }
          }
        }
        
        jreleaser {
          signing {
            active = 'ALWAYS'
            armored = true
          }
          deploy {
            maven {
              mavenCentral {
                sonatype {
                  active = 'ALWAYS'
                  url = 'https://central.sonatype.com/api/v1/publisher'
                  stagingRepository('build/staging-deploy')
                }
              }
            }
          }
        }

        tasks.register('createJReleaserOutputDir') {
          doLast {
            mkdir 'build/jreleaser'
          }
        }

        tasks.named('jreleaserFullRelease') {
          dependsOn 'createJReleaserOutputDir'
        }" > build.gradle

        # Initialize Gradle wrapper
        gradle wrapper

    - name: Create JReleaser output directory
      run: mkdir -p build/jreleaser

    - name: Publish dummy package to Maven Central
      env:
        JRELEASER_MAVENCENTRAL_USERNAME: ${{ secrets.CENTRAL_PORTAL_TOKEN_USERNAME }}
        JRELEASER_MAVENCENTRAL_TOKEN: ${{ secrets.CENTRAL_PORTAL_TOKEN_PASSWORD }}
        JRELEASER_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE_JAVA_PUBLISHING }}
        JRELEASER_GPG_SECRET_KEY: ${{ secrets.GPG_PRIVATE_KEY_JAVA_PUBLISHING }}
        JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.GPG_PUBLIC_KEY_JAVA_PUBLISHING }}
        JRELEASER_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        ./gradlew clean createJReleaserOutputDir jreleaserConfig build publish jreleaserFullRelease jreleaserChangelog -d --stacktrace --info

    - name: JReleaser output
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: jreleaser-logs
        path: |
          build/jreleaser/trace.log
          build/jreleaser/output.properties