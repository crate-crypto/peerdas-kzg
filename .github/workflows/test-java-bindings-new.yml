name: Java Cross-platform Build and Test

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:
    inputs:
      ref:
        description: 'The reference (branch/tag/commit) to checkout'
        required: false
      release-type:
        type: choice
        required: false
        default: 'none'
        description: 'Indicates whether we want to make a release and if which one'
        options:
          - release
          - none

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
          - target: aarch64-apple-darwin
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: ubuntu-latest
          - target: x86_64-pc-windows-gnu
            os: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || github.ref }}
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.target }}
          override: true
      - name: Install cargo-binstall
        uses: taiki-e/install-action@cargo-binstall
      - name: Install Zig
        uses: goto-bus-stop/setup-zig@v2
        with:
          version: 0.10.1
      - name: Install cargo-zigbuild
        run: cargo binstall --no-confirm cargo-zigbuild
      - name: Run compile script
        run: |
          chmod +x .github/scripts/compile_all_targets_java_new.sh
          .github/scripts/compile_all_targets_java_new.sh ${{ matrix.target }}
        shell: bash
      - name: Upload dynamic libs
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}
          path: bindings/java/java_code/src/main/resources/${{ matrix.target }}

  test:
    name: Test on ${{ matrix.target }}
    needs: build
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: aarch64-unknown-linux-gnu
            os: linux-arm64
          - target: x86_64-apple-darwin
            os: macos-13
          - target: aarch64-apple-darwin
            os: macos-14
          - target: x86_64-pc-windows-gnu
            os: windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || github.ref }}
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.target }}
          path: bindings/java/java_code/src/main/resources/${{ matrix.target }}
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Build with Gradle (no tests)
        run: ./gradlew build -x test
        working-directory: bindings/java/java_code
      - name: Run Gradle tests
        run: ./gradlew test --info --stacktrace --scan
        working-directory: bindings/java/java_code

  publish:
    name: Publish
    needs: [build, test]
    runs-on: ubuntu-latest
    if: ${{ inputs.release-type != 'none' }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref || github.ref }}
      - name: Debug input value
        run: echo "Release type is ${{ inputs.release-type }}"
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: bindings/java/java_code/src/main/resources
      - name: List merged artifacts
        run: ls -R bindings/java/java_code